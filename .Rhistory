plot(x,y, lwd = 3, frame=FALSE, type="l")
library(manipulate)
library("knitr", lib.loc="~/R/win-library/3.2")
mu = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1-alpha)* sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
mu = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1-alpha)* sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
end
m + c(-1,1)*qt(.95, 16)*sr*(1/18+1/18)^.5
##Power
mu = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1-alpha)* sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider( 1, 50, step = 1, initial = 16),
alpha = slider(0.01,0.1, step = 0.01, initial =0.05 )
)
quit
}
mu = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1-alpha)* sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider( 1, 50, step = 1, initial = 16),
alpha = slider(0.01,0.1, step = 0.01, initial =0.05 )
)
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider( 1, 50, step = 1, initial = 16),
alpha = slider(0.01,0.1, step = 0.01, initial =0.05 )
)
mu0 = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1-alpha)* sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider( 1, 50, step = 1, initial = 16),
alpha = slider(0.01,0.1, step = 0.01, initial =0.05 )
)
power.t.test(n=16, delta = 2, sd=1, type= "one.sample", alternative = "one.sided")$power
power.t.test(n=16, delta = 2/4, sd=1, type= "one.sample", alternative = "one.sided")$power
power.t.test(power = 0.8, delta = 2/4, sd=1, type = "one.sample", alternative = "one.sided")$n
power.t.test(n = 16, power = 0.8, sd=1, type = "one.sample", alternative = "one.sided")$delta
?set.seed
library(UsingR)
library("UsingR")
install.packages("UsingR")
library("UsingR")
data("father.son")
x <- father.son$sheight
n <- length(x)
B <- 1000
resamples <- matrix(sample(x, n*B, replace = TRUE), B, n)
resampledMedians <- apply(resamples, 1, median)
View(resamples)
sd(resampledMedians)
quantile(resampledMedians, C(0.025,0.975))
resamples <- matrix(sample(x, n*B, replace = TRUE), B, n)
medians <- apply(resamples, 1, median)
sd(medians)
quantile(medians, C(0.025,0.975))
quantiles(medians, C(0.025,0.975))
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
?t.test
t.test(x, y)
t.test(x, y, paired = TRUE)
round(qnorm(.95, mean = 1100, sd = 75, lower.tail = TRUE),3)
round(qnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE),3)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
pbinom(2, size = 4, prob = 0.5, lower.tail = TRUE)
pbinom(3, size = 4, prob = 0.5, lower.tail = TRUE)
pbinom(3, size = 4, prob = 0.75, lower.tail = TRUE)
pbinom(2, size = 4, prob = 0.75, lower.tail = TRUE)
pbinom(3, size = 4, prob = 0.25, lower.tail = TRUE)
round (pbinom(3, size = 4, prob = 0.50, lower.tail = TRUE))
round(pbinom(4, prob = .5, size = 5, lower.tail = FALSE))
ppois(9, 178.7, lower.tail = FALSE)
ppois(9, 1, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
t.test(-3, 1, alternative = "two.sided", paired = FALSE)
pbinom(3, 5,.5) - pbinom(2,5,.5)
ppois(10, 1787*1/100)
se <- sqrt((8*1.5^2+8*1.8^2)/16)*(1/9+1/9))
se <- sqrt((8*1.5^2+8*1.8^2)/16*(1/9+1/9))
z <- (-3 + 1)/se
pvalue <- pnorm(z)*2
pvalue
power.t.test(power = .9, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$n
power.t.test(power = 100, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$power
power.t.test(n = 100, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$power
install.packages(c("curl", "foreign", "lme4", "MatrixModels", "RMySQL", "scales"))
?Foreign
library("foreign", lib.loc="~/R/win-library/3.2")
?foreign
??foreign
library("swril")
library(swirl)
swirl()
10/sqrt(100)
(32-30)/1
(32- 30)/(10/sqrt(16))
15
qt(0.95,15)
dim(fs)
t.test
t.test(fs$fheight, fs$sheight)
t.test(fs$fheight-fs$sheight)
11.7885*sd(fs$fheight-fs$sheight)/sqrt(1078)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.00390625
mybin[8]
.035
mybin[8]
mybin[9]
mybin[7]=.144 and mybin[8]=.035.
mybin[7], mybin[8]
info()
skip()
country <- c("Italy", "France", "India", "Canada")
name <- c("Tom", "Sue", "Mike", "Jane")
bheight <- c(1.87, 1.67, 1.77, 1.76)
bmi <- c(23, 28, 29, 21)
survey <- data.frame(country, name, bheight, bmi)
survey
newvec <- c(F, T,T,F)
newsurvey <- cbind(survey, newvec)
iris
FactorSp <- as.integer(iris$Species)
newiris <- cbind(iris, FactorSp)
View(newiris)
attach(iris)
myFilter <- (iris$Species = TRUE)
myFilter
myFilter <- (Species == "virginica")
newiris <- cbind(iris, myFilter)
names(newiris)
View(newiris)
View(iris)
virginica.s <- newiris[myFilter==T, c("Sepal.Length", "Sepal.Width")]
viginica.s
virginica.s
class(viginica.s)
class(virginica.s)
x <- c(4,5,6)
ifelse(x<5, "smaller than", ifelse(x==5, "equal to", "greater than"))
install.packages(c("dplyr", "quantreg", "rmarkdown", "xml2"))
slsummar <- read.csv("~/GitHub/Student-STEAM-Pathways/Data/slsummar.csv")
dim(slsummar)
head(slsummar)
View(slsummar)
x <- 1:20
movingavg <- function(x){
l <- length(x)
(x[1:(l-2)] + x[2:(l-1)] + x[3:l])/3
}
View(movingavg)
movingavg(1:20)
movingavg <- function(x){
l <- length(x)
(x[1:(l-2)] + x[2:(l-1)] + x[3:l])/3
}
movingavg(1:20)
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight))/sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight))/sd(father.son$fheight)
rho <- cor(x, y)
rho
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x + 0)
coef(regr_line)
data(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
regr_line <- lm(y~x)
coef(regr_line)
slope <- .5*1/.5
slope
n_quiz1 <- 1.5
n_quiz2 <- 0.4 * n_quiz1
n_quiz2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
s <- sd(x)
ans <- (8.58- m)/s
ans
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x)
coef(regr_line)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x + 0)
coef(regr_line)
data(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
regr_line <- lm(y~x)
coef(regr_line)
n_quiz1 <- 1.5
n_quiz2 <- 0.4 * n_quiz1
n_quiz2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
s <- sd(x)
ans <- (8.58- m)/s
ans
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x)
coef(regr_line)
mean(x)
install.packages(c("car", "jsonlite", "mime", "Rcpp", "RMySQL", "tidyr"))
library("swirl")
swirl()
library(swirl)
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
install_from_swirl("Regression Models")
swirl()
fit <- lm(child~parent, galton)
summary(fit)
View(galton)
mean(fit$residuals)
cov(fit$residuals, galton$parent
)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(child, galton)
View(galton)
varChild <- var(galton$child)
quit
swirl(quit)
library(swirl)
swirl()
varRes <- var(fit$residuals)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
install.packages(c("evaluate", "formatR", "highr", "installr"))
x <- c(0.61, 0.93,0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm (x ~ y)
fit <- lm (y ~ x)
est < - predict(fit, data.frame(x))
est <- predict(fit, data.frame(x))
plot(x,y)
abline(fit, col="blue")
summary(fit)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
predict(fit, data.frame(x=mean(x)), interval = "confidence")
?mtcars
p1 <- predict(fit, data.frame(x), interval = "confidence")
View(p1)
plot(x,y, xlab = 'Weight (1000ib)', ylab = 'MPG')
abline(fit, col="red")
lines(x,p1[,2], col="purple")
lines(x,p1[,3], col="purple")
predict(fit, data.frame(x=3), interval = "prediction")
predict(fit, data.frame(x=5), interval = "prediction")
fit2 <- lm(y~I(x/2))
tb12 <- summary(fit2)$coefficients
View(tb12)
mn <- tbl2[2,1]
mn <- tb12[2,1]
View(tb12)
std_err <- tbl2[2,2]
std_err <- tb12[2,2]
deg_fr <- fit2$df
fit2
mn + c(-1,1) * qt(0.975, df=deg_fr) * std_err
summary(fit)$coefficients
fit3 <- lm(y~I(x/100))
summary(fit3)$coeffcients
summary(fit3)$coefficients
c <- -5
cf1 <- summary(fit)$coefficients
cf1
fit4 <- lm(y~I(x+c))
cf2 <- summary(fit4)$coefficients
cf2
b0 <- cf1[1,1]
b1 <- cf1[2,1]
c(b0,b1)
b0-c*b1
fit5 <- lm(y ~ 1)
fit6 <- lm(y ~ x -1)
plot(x,y)
abline(fit, col="red")
abline(fit5, col="blue")
abline(fit6, col="green")
anova(fit)
anova(fit5)
278/1126
sum(resid(fit))
sum(resid(fit5))
sum(resid(fit6))
summary(fit)$sigma
summary(fit5)$sigma
summary(fit6)$sigma
x <- c(0.61, 0.93,0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm (y ~ x)
est <- predict(fit, data.frame(x))
plot(x,y)
abline(fit, col="blue")
summary(fit)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
p1 <- predict(fit, data.frame(x), interval = "confidence")
plot(x,y, xlab = 'Weight (1000ib)', ylab = 'MPG')
abline(fit, col="red")
lines(x,p1[,2], col="purple")
p1 <- predict(fit, data.frame(x), interval = "confidence")
View(p1)
predict(fit, data.frame(x=mean(x)), interval = "confidence")
predict(fit, data.frame(x=3), interval = "prediction")
fit2 <- lm(y~I(x/2))
tb12 <- summary(fit2)$coefficients
mn <- tb12[2,1]
std_err <- tb12[2,2]
deg_fr <- fit2$df
mn + c(-1,1) * qt(0.975, df=deg_fr) * std_err
predict(fit, data.frame(x=3), interval = "prediction")
mn + c(-1,1) * qt(0.975, df=deg_fr) * std_err
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
data("mtcars")
summary(mtcars)
names(mtcars) <- c( "MPG", "cylinders","displace", "horsepower", "axratio", "weight", "quarttime", "vs", "transtype", "gears", "ncarbs")
fit <- lm(MPG ~ mtcars$transtype, data = mtcars)
fit1 <- lm(MPG ~ weight, data = mtcars)
fit2 <- lm(formula = MPG ~ transtype + cylinders + displace + horsepower + weight + quarttime + axratio , data = mtcars)
summary(fit2)
mtcars$transtype <- factor(mtcars$transtype)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$displace <- factor(mtcars$displace)
mtcars$horsepower <- factor(mtcars$horsepower)
mtcars$weight <- factor(mtcars$weight)
mtcars$quarttime <- factor(mtcars$quarttime)
mtcars$axratio <- factor(mtcars$axratio)
levels(mtcars$transtype) <- c("automatic", "manual")
fit <- lm(MPG ~ mtcars$transtype, data = mtcars)
fit1 <- lm(MPG ~ weight, data = mtcars)
fit2 <- lm(formula = MPG ~ transtype + cylinders + displace + horsepower + weight + quarttime + axratio , data = mtcars)
summary(fit2)
str(mtcars)
data("mtcars")
summary(mtcars)
names(mtcars) <- c( "MPG", "cylinders","displace", "horsepower", "axratio", "weight", "quarttime", "vs", "transtype", "gears", "ncarbs")
mtcars$transtype <- factor(mtcars$transtype)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
levels(mtcars$transtype) <- c("automatic", "manual")
fit2 <- lm(formula = MPG ~ transtype + cylinders + displace + horsepower + weight + quarttime + axratio , data = mtcars)
summary(fit2)
fitfull <- lm(MPG ~ ., data = mtc)
fitfull <- lm(MPG ~ ., data = mtcars)
fitreduct <- step(fitfull, direction = "backward", k = 2, trace = 0)
fitreduct
library(httr)
library(httpuv)
library(jsonlite)
library(dplyr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
github <- oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "b126f1e6f48d4c53873a", "2c5888524a093bfe6154532fc377c939cc23325d")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
View(slsummar)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
install.packages(c("caret", "coda", "data.table", "foreach", "HistData", "Hmisc", "iterators", "lme4", "matrixStats", "packrat", "RcppEigen", "readr", "rmarkdown", "RMySQL", "sp", "stringi", "testthat", "xtable"))
install.packages("devtools")
devtools::install_github("ismayc/rticles")
install.packages("rio")
install.packages("psych")
install.packages("sqldf")
install.packages("quantmod")
install.packages("rvest")
install.packages("reshape2")
install.packages("zoo")
install.packages("editR")
install.packages("DT")
install.packages("googleVis")
install.packages("RColorBrewer")
install.packages("plotly")
install.packages("leaflet")
install.packages("RGA")
install.packages("RSiteCatalyst")
install.packages("roxygen2")
install.packages("openxlsx")
install.packages(c("caret", "curl", "jsonlite", "lubridate", "matrixStats", "pbkrtest", "raster", "Rcpp", "rstudioapi"))
?knit
library(knitr)
?"knitr"
?rinstall
?installr
library("installr", lib.loc="~/R/win-library/3.2")
?installr
installr()
installr
installr()
install.packages(c("BH", "car", "caret", "curl", "devtools", "digest", "evaluate", "formatR", "ggplot2", "git2r", "googlesheets", "gridExtra", "gtable", "Hmisc", "htmltools", "htmlwidgets", "httr", "installr", "kernlab", "knitr", "latticeExtra", "leaflet", "lme4", "matrixStats", "memoise", "mnormt", "munsell", "packrat", "pbkrtest", "plotly", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readODS", "RGA", "rio", "rJava", "rmarkdown", "RMySQL", "rsconnect", "RSiteCatalyst", "rstudioapi", "scales", "shiny", "sp", "tidyr", "TTR", "viridis", "XML", "xtable"))
update.R
library("installr", lib.loc="~/R/win-library/3.2")
updateR
library(installr)
installr()
setwd("~/GitHub/datasciencecoursera")
